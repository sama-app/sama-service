name: prod

on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  app-build:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - uses: actions/checkout@v2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Build image for production
        run: make app-pull-image BUILD_VERSION=$(make version)

      - name: Upload to ECR
        run: make app-upload-to-ecr BUILD_VERSION=$(make version) VERSION=production

  webserver-build:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - uses: actions/checkout@v2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Build image for production
        run: make webserver-pull-image BUILD_VERSION=$(make version)

      - name: Upload to ECR
        run: make webserver-upload-to-ecr BUILD_VERSION=$(make version) VERSION=production

  deploy-ecs:
    runs-on: ubuntu-latest
    needs: [app-build, webserver-build]

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Init Terraform
        run: make ecs-terraform-init ENV=prod

      - name: Update Infra
        run: make ecs-update-infra ENV=prod

      - name: Pull ECS task definition
        run: make ecs-pull-task-definition ENV=prod

      - name: Render sama-service task definition
        id: render-service
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: sama-service
          image: 216862985054.dkr.ecr.eu-central-1.amazonaws.com/sama-service:production

      - name: Render sama-webserver task definition
        id: render-webserver
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-service.outputs.task-definition }}
          container-name: sama-webserver
          image: 216862985054.dkr.ecr.eu-central-1.amazonaws.com/sama-webserver:production

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-webserver.outputs.task-definition }}
          service: sama-service
          cluster: ecs-dev
          wait-for-service-stability: true
        timeout-minutes: 10

#  deploy-ec2:
#    needs: [app-build, webserver-build]
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: eu-central-1
#
#      - uses: actions/checkout@v2
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v1
#        with:
#          terraform_wrapper: false
#
#      - name: Init Terraform
#        run: make terraform-init ENV=prod
#
#      - name: Get Current Deployment Colour
#        id: current_deployment
#        run: echo ::set-output name=COLOUR::$(make current-deployment ENV=prod)
#
#      - name: Print currrent deployment
#        run: echo "Current deployment is ${{ steps.current_deployment.outputs.COLOUR }}"
#
#      - name: Deploy
#        run: make deploy ENV=prod
#
#      - name: Undeploy Blue
#        run: make destroy-blue ENV=prod
#        if: steps.current_deployment.outputs.COLOUR == 'blue'
#
#      - name: Undeploy Green
#        run: make destroy-green ENV=prod
#        if: steps.current_deployment.outputs.COLOUR == 'green'
