name: prod

on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  app-build:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - uses: actions/checkout@v2

      - name: Set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build App
        run: make app-container

      - name: Upload to ECR
        run: make app-upload-to-ecr VERSION=production

  webserver-build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - uses: actions/checkout@v2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Webserver
        run: make webserver-container

      - name: Upload to ECR
        run: make webserver-upload-to-ecr VERSION=production

  deploy:
    needs: [app-build, webserver-build]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Init Terraform
        run: make terraform-init ENV=prod

      - name: Get Current Deployment Colour
        id: current_deployment
        run: echo ::set-output name=COLOUR::$(make current-deployment ENV=prod)

      - name: Print currrent deployment
        run: echo "Current deployment is ${{ steps.current_deployment.outputs.COLOUR }}"

      - name: Deploy
        run: make deploy ENV=prod

      - name: Undeploy Blue
        run: make destroy-blue ENV=prod
        if: steps.current_deployment.outputs.COLOUR == 'blue'

      - name: Undeploy Green
        run: make destroy-green ENV=prod
        if: steps.current_deployment.outputs.COLOUR == 'green'
